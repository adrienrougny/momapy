from sbgnpy_proto.core import NodeLayoutElement
from sbgnpy_proto.geometry import Point

def right_of(obj, distance):
    anchor = "west"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.east
    else:
        raise TypeError
    p = source_point + (distance, 0)
    return p, anchor

def left_of(obj, distance):
    anchor = "east"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.west
    else:
        raise TypeError
    p = source_point - (distance, 0)
    return p, anchor

def above_of(obj, distance):
    anchor = "south"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.north
    else:
        raise TypeError
    p = source_point + (0, distance)
    return p, anchor

def below_of(obj, distance):
    anchor = "north"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.south
    else:
        raise TypeError
    p = source_point - (0, distance)
    return p, anchor

def above_left_of(obj, distance1, distance2=None):
    if distance2 is None:
        distance2 = distance1
    anchor = "south_east"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.north_west
    else:
        raise TypeError
    p = source_point + (-distance2, distance1)
    return p, anchor

def above_right_of(obj, distance1, distance2=None):
    if distance2 is None:
        distance2 = distance1
    anchor = "south_west"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.north_east
    else:
        raise TypeError
    p = source_point + (distance2, distance1)
    return p, anchor

def below_left_of(obj, distance1, distance2=None):
    if distance2 is None:
        distance2 = distance1
    anchor = "north_east"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.south_west
    else:
        raise TypeError
    p = source_point - (distance2, distance1)
    return p, anchor

def below_right_of(obj, distance1, distance2=None):
    if distance2 is None:
        distance2 = distance1
    anchor = "north_west"
    if isinstance(obj, Point):
        source_point = obj
    elif isinstance(obj, NodeLayoutElement):
        source_point = obj.south_east
    else:
        raise TypeError
    p = source_point + (distance2, -distance1)
    return p, anchor
